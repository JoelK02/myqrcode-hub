"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/order/page",{

/***/ "(app-pages-browser)/./app/services/qrcode.ts":
/*!********************************!*\
  !*** ./app/services/qrcode.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignQRCodeToUnit: () => (/* binding */ assignQRCodeToUnit),\n/* harmony export */   generateAndUploadQRCode: () => (/* binding */ generateAndUploadQRCode),\n/* harmony export */   generateQRCodeDataUrl: () => (/* binding */ generateQRCodeDataUrl)\n/* harmony export */ });\n/* harmony import */ var qrcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qrcode */ \"(app-pages-browser)/./node_modules/qrcode/lib/browser.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\n// Base URL for the guest ordering page\nconst getBaseOrderUrl = ()=>{\n    try {\n        // First prioritize environment variable\n        if (true) {\n            // Remove any trailing slash to ensure consistent URL formatting\n            const baseUrl = \"https://myqrcode-hub.vercel.app\".endsWith('/') ? \"https://myqrcode-hub.vercel.app\".slice(0, -1) : \"https://myqrcode-hub.vercel.app\";\n            console.log(\"[URL Debug] Using NEXT_PUBLIC_APP_URL: \".concat(baseUrl, \"/order\"));\n            return \"\".concat(baseUrl, \"/order\");\n        }\n        // Fall back to client-side origin detection only if env var isn't available\n        if (true) {\n            const origin = window.location.origin;\n            console.log(\"[URL Debug] Using window.location.origin: \".concat(origin, \"/order\"));\n            return \"\".concat(origin, \"/order\");\n        }\n        // Last resort fallback\n        console.log('[URL Debug] Using hardcoded fallback URL');\n        return 'https://myqrcode-hub.vercel.app/order';\n    } catch (error) {\n        // In case of any errors, return the fallback URL\n        console.error('[URL Debug] Error in getBaseOrderUrl:', error);\n        return 'https://myqrcode-hub.vercel.app/order';\n    }\n};\n// Generate a QR code data URL \nasync function generateQRCodeDataUrl(unitId) {\n    try {\n        const orderUrl = \"\".concat(getBaseOrderUrl(), \"?unit=\").concat(unitId);\n        console.log(\"[QR Debug] Generated order URL for data URL: \".concat(orderUrl));\n        // Generate QR code data URL\n        const dataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_0__.toDataURL(orderUrl, {\n            width: 300,\n            margin: 2,\n            color: {\n                dark: '#000000',\n                light: '#FFFFFF'\n            }\n        });\n        return dataUrl;\n    } catch (error) {\n        console.error('Error generating QR code:', error);\n        throw new Error('Failed to generate QR code');\n    }\n}\n// Generate a QR code and upload to Supabase storage\nasync function generateAndUploadQRCode(unitId, unitNumber, buildingId) {\n    try {\n        console.log(\"[QR Debug] Starting QR code generation for unit: \".concat(unitId, \", building: \").concat(buildingId));\n        const orderUrl = \"\".concat(getBaseOrderUrl(), \"?unit=\").concat(unitId);\n        console.log(\"[QR Debug] Generated order URL: \".concat(orderUrl));\n        // Generate QR code as data URL instead of buffer\n        const qrCodeDataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_0__.toDataURL(orderUrl, {\n            width: 300,\n            margin: 2,\n            color: {\n                dark: '#000000',\n                light: '#FFFFFF'\n            }\n        });\n        console.log(\"[QR Debug] QR code data URL generated successfully (truncated): \".concat(qrCodeDataUrl.substring(0, 50), \"...\"));\n        // Convert data URL to File object for upload\n        const blob = await (await fetch(qrCodeDataUrl)).blob();\n        const file = new File([\n            blob\n        ], \"unit-\".concat(unitId, \".png\"), {\n            type: 'image/png'\n        });\n        console.log(\"[QR Debug] Created File object for upload: \".concat(file.name, \", size: \").concat(file.size, \" bytes\"));\n        // Check if bucket exists\n        try {\n            const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();\n            if (bucketsError) {\n                console.error('[QR Debug] Error listing buckets:', bucketsError);\n            } else {\n                console.log('[QR Debug] Available buckets:', buckets.map((b)=>b.name).join(', '));\n                const bucketExists = buckets.some((bucket)=>bucket.name === 'qrcodes');\n                console.log(\"[QR Debug] Bucket 'qrcodes' exists: \".concat(bucketExists));\n                if (!bucketExists) {\n                    console.error('[QR Debug] The qrcodes bucket does not exist in your Supabase storage!');\n                    // Try to create the bucket\n                    try {\n                        const { data, error } = await supabase.storage.createBucket('qrcodes', {\n                            public: true\n                        });\n                        console.log('[QR Debug] Attempted to create qrcodes bucket:', data, error);\n                    } catch (createError) {\n                        console.error('[QR Debug] Failed to create bucket:', createError);\n                    }\n                }\n            }\n        } catch (bucketCheckError) {\n            console.error('[QR Debug] Error checking buckets:', bucketCheckError);\n        }\n        // Upload the QR code to Supabase Storage\n        console.log(\"[QR Debug] Attempting to upload to path: units/\".concat(buildingId, \"/\").concat(unitId, \".png\"));\n        // Make sure the path exists\n        try {\n            // Create folders structure if needed\n            const folderPath = \"units/\".concat(buildingId);\n            console.log(\"[QR Debug] Creating folder path: \".concat(folderPath));\n        } catch (folderError) {\n            console.error('[QR Debug] Error with folder:', folderError);\n        }\n        const { data, error } = await supabase.storage.from('qrcodes').upload(\"units/\".concat(buildingId, \"/\").concat(unitId, \".png\"), file, {\n            upsert: true,\n            contentType: 'image/png'\n        });\n        if (error) {\n            console.error('[QR Debug] Error uploading QR code:', error);\n            throw new Error(\"Failed to upload QR code: \".concat(error.message));\n        }\n        console.log('[QR Debug] Upload successful:', data);\n        // Get the public URL\n        const { data: urlData } = supabase.storage.from('qrcodes').getPublicUrl(\"units/\".concat(buildingId, \"/\").concat(unitId, \".png\"));\n        console.log('[QR Debug] Generated public URL:', urlData.publicUrl);\n        // Verify the URL by checking if it returns a valid response\n        try {\n            const response = await fetch(urlData.publicUrl, {\n                method: 'HEAD'\n            });\n            console.log(\"[QR Debug] URL verification status: \".concat(response.status));\n        } catch (verifyError) {\n            console.warn('[QR Debug] Could not verify URL:', verifyError);\n        }\n        return urlData.publicUrl;\n    } catch (error) {\n        console.error('[QR Debug] Error generating or uploading QR code:', error);\n        throw new Error('Failed to generate or upload QR code');\n    }\n}\n// Assign a QR code to a unit\nasync function assignQRCodeToUnit(unitId) {\n    try {\n        // Get unit details\n        const { data: unit, error: unitError } = await supabase.from('units').select('*').eq('id', unitId).single();\n        if (unitError) {\n            console.error('Error getting unit:', unitError);\n            throw new Error(\"Failed to get unit: \".concat(unitError.message));\n        }\n        // Generate and upload QR code\n        const qrCodeUrl = await generateAndUploadQRCode(unit.id, unit.unit_number, unit.building_id);\n        // Update unit with QR code URL\n        const updateData = {\n            id: unitId,\n            qr_code_url: qrCodeUrl\n        };\n        const { data: updatedUnit, error: updateError } = await supabase.from('units').update({\n            qr_code_url: qrCodeUrl\n        }).eq('id', unitId).select().single();\n        if (updateError) {\n            console.error('Error updating unit:', updateError);\n            throw new Error(\"Failed to update unit: \".concat(updateError.message));\n        }\n        return updatedUnit;\n    } catch (error) {\n        console.error('Error assigning QR code to unit:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9zZXJ2aWNlcy9xcmNvZGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEI7QUFDeUI7QUFHckQsTUFBTUUsY0FBY0MsMENBQW9DO0FBQ3hELE1BQU1HLGtCQUFrQkgsa05BQXlDO0FBQ2pFLE1BQU1LLFdBQVdQLG1FQUFZQSxDQUFDQyxhQUFhSTtBQUUzQyx1Q0FBdUM7QUFDdkMsTUFBTUcsa0JBQWtCO0lBQ3RCLElBQUk7UUFDRix3Q0FBd0M7UUFDeEMsSUFBSU4sSUFBK0IsRUFBRTtZQUNuQyxnRUFBZ0U7WUFDaEUsTUFBTVEsVUFBVVIsaUNBQStCLENBQUNTLFFBQVEsQ0FBQyxPQUNyRFQsaUNBQStCLENBQUNVLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FDMUNWLGlDQUErQjtZQUVuQ1csUUFBUUMsR0FBRyxDQUFDLDBDQUFrRCxPQUFSSixTQUFRO1lBQzlELE9BQU8sR0FBVyxPQUFSQSxTQUFRO1FBQ3BCO1FBRUEsNEVBQTRFO1FBQzVFLElBQUksSUFBNkIsRUFBRTtZQUNqQyxNQUFNSyxTQUFTQyxPQUFPQyxRQUFRLENBQUNGLE1BQU07WUFDckNGLFFBQVFDLEdBQUcsQ0FBQyw2Q0FBb0QsT0FBUEMsUUFBTztZQUNoRSxPQUFPLEdBQVUsT0FBUEEsUUFBTztRQUNuQjtRQUVBLHVCQUF1QjtRQUN2QkYsUUFBUUMsR0FBRyxDQUFDO1FBQ1osT0FBTztJQUNULEVBQUUsT0FBT0ksT0FBTztRQUNkLGlEQUFpRDtRQUNqREwsUUFBUUssS0FBSyxDQUFDLHlDQUF5Q0E7UUFDdkQsT0FBTztJQUNUO0FBQ0Y7QUFFQSwrQkFBK0I7QUFDeEIsZUFBZUMsc0JBQXNCQyxNQUFjO0lBQ3hELElBQUk7UUFDRixNQUFNQyxXQUFXLEdBQTZCRCxPQUExQlosbUJBQWtCLFVBQWUsT0FBUFk7UUFDOUNQLFFBQVFDLEdBQUcsQ0FBQyxnREFBeUQsT0FBVE87UUFFNUQsNEJBQTRCO1FBQzVCLE1BQU1DLFVBQVUsTUFBTXZCLDZDQUFn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LFNBQ0xnQixNQUFNLENBQUMsS0FDUEMsRUFBRSxDQUFDLE1BQU14RCxRQUNUeUQsTUFBTTtRQUVULElBQUlILFdBQVc7WUFDYjdELFFBQVFLLEtBQUssQ0FBQyx1QkFBdUJ3RDtZQUNyQyxNQUFNLElBQUk3QyxNQUFNLHVCQUF5QyxPQUFsQjZDLFVBQVVYLE9BQU87UUFDMUQ7UUFFQSw4QkFBOEI7UUFDOUIsTUFBTWUsWUFBWSxNQUFNaEQsd0JBQXdCMkMsS0FBS00sRUFBRSxFQUFFTixLQUFLTyxXQUFXLEVBQUVQLEtBQUtRLFdBQVc7UUFFM0YsK0JBQStCO1FBQy9CLE1BQU1DLGFBQThCO1lBQ2xDSCxJQUFJM0Q7WUFDSitELGFBQWFMO1FBQ2Y7UUFFQSxNQUFNLEVBQUVwQyxNQUFNMEMsV0FBVyxFQUFFbEUsT0FBT21FLFdBQVcsRUFBRSxHQUFHLE1BQU05RSxTQUNyRG9ELElBQUksQ0FBQyxTQUNMMkIsTUFBTSxDQUFDO1lBQUVILGFBQWFMO1FBQVUsR0FDaENGLEVBQUUsQ0FBQyxNQUFNeEQsUUFDVHVELE1BQU0sR0FDTkUsTUFBTTtRQUVULElBQUlRLGFBQWE7WUFDZnhFLFFBQVFLLEtBQUssQ0FBQyx3QkFBd0JtRTtZQUN0QyxNQUFNLElBQUl4RCxNQUFNLDBCQUE4QyxPQUFwQndELFlBQVl0QixPQUFPO1FBQy9EO1FBRUEsT0FBT3FCO0lBQ1QsRUFBRSxPQUFPbEUsT0FBTztRQUNkTCxRQUFRSyxLQUFLLENBQUMsb0NBQW9DQTtRQUNsRCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb2Vsa3dvaC9Eb2N1bWVudHMvR2l0SHViL215cXJjb2RlLWh1Yi9hcHAvc2VydmljZXMvcXJjb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRUkNvZGUgZnJvbSAncXJjb2RlJztcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XG5pbXBvcnQgeyBVbml0LCBVcGRhdGVVbml0SW5wdXQgfSBmcm9tICcuLi90eXBlcy91bml0cyc7XG5cbmNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMITtcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZITtcbmNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXkpO1xuXG4vLyBCYXNlIFVSTCBmb3IgdGhlIGd1ZXN0IG9yZGVyaW5nIHBhZ2VcbmNvbnN0IGdldEJhc2VPcmRlclVybCA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBGaXJzdCBwcmlvcml0aXplIGVudmlyb25tZW50IHZhcmlhYmxlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkwpIHtcbiAgICAgIC8vIFJlbW92ZSBhbnkgdHJhaWxpbmcgc2xhc2ggdG8gZW5zdXJlIGNvbnNpc3RlbnQgVVJMIGZvcm1hdHRpbmdcbiAgICAgIGNvbnN0IGJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMLmVuZHNXaXRoKCcvJylcbiAgICAgICAgPyBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMLnNsaWNlKDAsIC0xKVxuICAgICAgICA6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkw7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBbVVJMIERlYnVnXSBVc2luZyBORVhUX1BVQkxJQ19BUFBfVVJMOiAke2Jhc2VVcmx9L29yZGVyYCk7XG4gICAgICByZXR1cm4gYCR7YmFzZVVybH0vb3JkZXJgO1xuICAgIH1cbiAgICBcbiAgICAvLyBGYWxsIGJhY2sgdG8gY2xpZW50LXNpZGUgb3JpZ2luIGRldGVjdGlvbiBvbmx5IGlmIGVudiB2YXIgaXNuJ3QgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBvcmlnaW4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xuICAgICAgY29uc29sZS5sb2coYFtVUkwgRGVidWddIFVzaW5nIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW46ICR7b3JpZ2lufS9vcmRlcmApO1xuICAgICAgcmV0dXJuIGAke29yaWdpbn0vb3JkZXJgO1xuICAgIH1cbiAgICBcbiAgICAvLyBMYXN0IHJlc29ydCBmYWxsYmFja1xuICAgIGNvbnNvbGUubG9nKCdbVVJMIERlYnVnXSBVc2luZyBoYXJkY29kZWQgZmFsbGJhY2sgVVJMJyk7XG4gICAgcmV0dXJuICdodHRwczovL215cXJjb2RlLWh1Yi52ZXJjZWwuYXBwL29yZGVyJztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBJbiBjYXNlIG9mIGFueSBlcnJvcnMsIHJldHVybiB0aGUgZmFsbGJhY2sgVVJMXG4gICAgY29uc29sZS5lcnJvcignW1VSTCBEZWJ1Z10gRXJyb3IgaW4gZ2V0QmFzZU9yZGVyVXJsOicsIGVycm9yKTtcbiAgICByZXR1cm4gJ2h0dHBzOi8vbXlxcmNvZGUtaHViLnZlcmNlbC5hcHAvb3JkZXInO1xuICB9XG59O1xuXG4vLyBHZW5lcmF0ZSBhIFFSIGNvZGUgZGF0YSBVUkwgXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVRUkNvZGVEYXRhVXJsKHVuaXRJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcmRlclVybCA9IGAke2dldEJhc2VPcmRlclVybCgpfT91bml0PSR7dW5pdElkfWA7XG4gICAgY29uc29sZS5sb2coYFtRUiBEZWJ1Z10gR2VuZXJhdGVkIG9yZGVyIFVSTCBmb3IgZGF0YSBVUkw6ICR7b3JkZXJVcmx9YCk7XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgUVIgY29kZSBkYXRhIFVSTFxuICAgIGNvbnN0IGRhdGFVcmwgPSBhd2FpdCBRUkNvZGUudG9EYXRhVVJMKG9yZGVyVXJsLCB7XG4gICAgICB3aWR0aDogMzAwLFxuICAgICAgbWFyZ2luOiAyLFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgZGFyazogJyMwMDAwMDAnLFxuICAgICAgICBsaWdodDogJyNGRkZGRkYnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gZGF0YVVybDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIFFSIGNvZGU6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIFFSIGNvZGUnKTtcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSBhIFFSIGNvZGUgYW5kIHVwbG9hZCB0byBTdXBhYmFzZSBzdG9yYWdlXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVBbmRVcGxvYWRRUkNvZGUodW5pdElkOiBzdHJpbmcsIHVuaXROdW1iZXI6IHN0cmluZywgYnVpbGRpbmdJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBTdGFydGluZyBRUiBjb2RlIGdlbmVyYXRpb24gZm9yIHVuaXQ6ICR7dW5pdElkfSwgYnVpbGRpbmc6ICR7YnVpbGRpbmdJZH1gKTtcbiAgICBjb25zdCBvcmRlclVybCA9IGAke2dldEJhc2VPcmRlclVybCgpfT91bml0PSR7dW5pdElkfWA7XG4gICAgY29uc29sZS5sb2coYFtRUiBEZWJ1Z10gR2VuZXJhdGVkIG9yZGVyIFVSTDogJHtvcmRlclVybH1gKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBRUiBjb2RlIGFzIGRhdGEgVVJMIGluc3RlYWQgb2YgYnVmZmVyXG4gICAgY29uc3QgcXJDb2RlRGF0YVVybCA9IGF3YWl0IFFSQ29kZS50b0RhdGFVUkwob3JkZXJVcmwsIHtcbiAgICAgIHdpZHRoOiAzMDAsXG4gICAgICBtYXJnaW46IDIsXG4gICAgICBjb2xvcjoge1xuICAgICAgICBkYXJrOiAnIzAwMDAwMCcsXG4gICAgICAgIGxpZ2h0OiAnI0ZGRkZGRicsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKGBbUVIgRGVidWddIFFSIGNvZGUgZGF0YSBVUkwgZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSAodHJ1bmNhdGVkKTogJHtxckNvZGVEYXRhVXJsLnN1YnN0cmluZygwLCA1MCl9Li4uYCk7XG4gICAgXG4gICAgLy8gQ29udmVydCBkYXRhIFVSTCB0byBGaWxlIG9iamVjdCBmb3IgdXBsb2FkXG4gICAgY29uc3QgYmxvYiA9IGF3YWl0IChhd2FpdCBmZXRjaChxckNvZGVEYXRhVXJsKSkuYmxvYigpO1xuICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbYmxvYl0sIGB1bml0LSR7dW5pdElkfS5wbmdgLCB7IHR5cGU6ICdpbWFnZS9wbmcnIH0pO1xuICAgIGNvbnNvbGUubG9nKGBbUVIgRGVidWddIENyZWF0ZWQgRmlsZSBvYmplY3QgZm9yIHVwbG9hZDogJHtmaWxlLm5hbWV9LCBzaXplOiAke2ZpbGUuc2l6ZX0gYnl0ZXNgKTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiBidWNrZXQgZXhpc3RzXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogYnVja2V0cywgZXJyb3I6IGJ1Y2tldHNFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZS5saXN0QnVja2V0cygpO1xuICAgICAgXG4gICAgICBpZiAoYnVja2V0c0Vycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBEZWJ1Z10gRXJyb3IgbGlzdGluZyBidWNrZXRzOicsIGJ1Y2tldHNFcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnW1FSIERlYnVnXSBBdmFpbGFibGUgYnVja2V0czonLCBidWNrZXRzLm1hcChiID0+IGIubmFtZSkuam9pbignLCAnKSk7XG4gICAgICAgIGNvbnN0IGJ1Y2tldEV4aXN0cyA9IGJ1Y2tldHMuc29tZShidWNrZXQgPT4gYnVja2V0Lm5hbWUgPT09ICdxcmNvZGVzJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbUVIgRGVidWddIEJ1Y2tldCAncXJjb2RlcycgZXhpc3RzOiAke2J1Y2tldEV4aXN0c31gKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghYnVja2V0RXhpc3RzKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignW1FSIERlYnVnXSBUaGUgcXJjb2RlcyBidWNrZXQgZG9lcyBub3QgZXhpc3QgaW4geW91ciBTdXBhYmFzZSBzdG9yYWdlIScpO1xuICAgICAgICAgIC8vIFRyeSB0byBjcmVhdGUgdGhlIGJ1Y2tldFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5zdG9yYWdlLmNyZWF0ZUJ1Y2tldCgncXJjb2RlcycsIHsgcHVibGljOiB0cnVlIH0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tRUiBEZWJ1Z10gQXR0ZW1wdGVkIHRvIGNyZWF0ZSBxcmNvZGVzIGJ1Y2tldDonLCBkYXRhLCBlcnJvcik7XG4gICAgICAgICAgfSBjYXRjaCAoY3JlYXRlRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBEZWJ1Z10gRmFpbGVkIHRvIGNyZWF0ZSBidWNrZXQ6JywgY3JlYXRlRXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGJ1Y2tldENoZWNrRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBEZWJ1Z10gRXJyb3IgY2hlY2tpbmcgYnVja2V0czonLCBidWNrZXRDaGVja0Vycm9yKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXBsb2FkIHRoZSBRUiBjb2RlIHRvIFN1cGFiYXNlIFN0b3JhZ2VcbiAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBBdHRlbXB0aW5nIHRvIHVwbG9hZCB0byBwYXRoOiB1bml0cy8ke2J1aWxkaW5nSWR9LyR7dW5pdElkfS5wbmdgKTtcbiAgICBcbiAgICAvLyBNYWtlIHN1cmUgdGhlIHBhdGggZXhpc3RzXG4gICAgdHJ5IHtcbiAgICAgIC8vIENyZWF0ZSBmb2xkZXJzIHN0cnVjdHVyZSBpZiBuZWVkZWRcbiAgICAgIGNvbnN0IGZvbGRlclBhdGggPSBgdW5pdHMvJHtidWlsZGluZ0lkfWA7XG4gICAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBDcmVhdGluZyBmb2xkZXIgcGF0aDogJHtmb2xkZXJQYXRofWApO1xuICAgIH0gY2F0Y2ggKGZvbGRlckVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbUVIgRGVidWddIEVycm9yIHdpdGggZm9sZGVyOicsIGZvbGRlckVycm9yKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZVxuICAgICAgLmZyb20oJ3FyY29kZXMnKVxuICAgICAgLnVwbG9hZChgdW5pdHMvJHtidWlsZGluZ0lkfS8ke3VuaXRJZH0ucG5nYCwgZmlsZSwge1xuICAgICAgICB1cHNlcnQ6IHRydWUsXG4gICAgICAgIGNvbnRlbnRUeXBlOiAnaW1hZ2UvcG5nJyxcbiAgICAgIH0pO1xuICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1FSIERlYnVnXSBFcnJvciB1cGxvYWRpbmcgUVIgY29kZTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB1cGxvYWQgUVIgY29kZTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZygnW1FSIERlYnVnXSBVcGxvYWQgc3VjY2Vzc2Z1bDonLCBkYXRhKTtcbiAgICBcbiAgICAvLyBHZXQgdGhlIHB1YmxpYyBVUkxcbiAgICBjb25zdCB7IGRhdGE6IHVybERhdGEgfSA9IHN1cGFiYXNlLnN0b3JhZ2VcbiAgICAgIC5mcm9tKCdxcmNvZGVzJylcbiAgICAgIC5nZXRQdWJsaWNVcmwoYHVuaXRzLyR7YnVpbGRpbmdJZH0vJHt1bml0SWR9LnBuZ2ApO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdbUVIgRGVidWddIEdlbmVyYXRlZCBwdWJsaWMgVVJMOicsIHVybERhdGEucHVibGljVXJsKTtcbiAgICBcbiAgICAvLyBWZXJpZnkgdGhlIFVSTCBieSBjaGVja2luZyBpZiBpdCByZXR1cm5zIGEgdmFsaWQgcmVzcG9uc2VcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmxEYXRhLnB1YmxpY1VybCwgeyBtZXRob2Q6ICdIRUFEJyB9KTtcbiAgICAgIGNvbnNvbGUubG9nKGBbUVIgRGVidWddIFVSTCB2ZXJpZmljYXRpb24gc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9IGNhdGNoICh2ZXJpZnlFcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKCdbUVIgRGVidWddIENvdWxkIG5vdCB2ZXJpZnkgVVJMOicsIHZlcmlmeUVycm9yKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHVybERhdGEucHVibGljVXJsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBEZWJ1Z10gRXJyb3IgZ2VuZXJhdGluZyBvciB1cGxvYWRpbmcgUVIgY29kZTonLCBlcnJvcik7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgb3IgdXBsb2FkIFFSIGNvZGUnKTtcbiAgfVxufVxuXG4vLyBBc3NpZ24gYSBRUiBjb2RlIHRvIGEgdW5pdFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc2lnblFSQ29kZVRvVW5pdCh1bml0SWQ6IHN0cmluZyk6IFByb21pc2U8VW5pdD4ge1xuICB0cnkge1xuICAgIC8vIEdldCB1bml0IGRldGFpbHNcbiAgICBjb25zdCB7IGRhdGE6IHVuaXQsIGVycm9yOiB1bml0RXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndW5pdHMnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ2lkJywgdW5pdElkKVxuICAgICAgLnNpbmdsZSgpO1xuICAgIFxuICAgIGlmICh1bml0RXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgdW5pdDonLCB1bml0RXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IHVuaXQ6ICR7dW5pdEVycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIFxuICAgIC8vIEdlbmVyYXRlIGFuZCB1cGxvYWQgUVIgY29kZVxuICAgIGNvbnN0IHFyQ29kZVVybCA9IGF3YWl0IGdlbmVyYXRlQW5kVXBsb2FkUVJDb2RlKHVuaXQuaWQsIHVuaXQudW5pdF9udW1iZXIsIHVuaXQuYnVpbGRpbmdfaWQpO1xuICAgIFxuICAgIC8vIFVwZGF0ZSB1bml0IHdpdGggUVIgY29kZSBVUkxcbiAgICBjb25zdCB1cGRhdGVEYXRhOiBVcGRhdGVVbml0SW5wdXQgPSB7XG4gICAgICBpZDogdW5pdElkLFxuICAgICAgcXJfY29kZV91cmw6IHFyQ29kZVVybFxuICAgIH07XG4gICAgXG4gICAgY29uc3QgeyBkYXRhOiB1cGRhdGVkVW5pdCwgZXJyb3I6IHVwZGF0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3VuaXRzJylcbiAgICAgIC51cGRhdGUoeyBxcl9jb2RlX3VybDogcXJDb2RlVXJsIH0pXG4gICAgICAuZXEoJ2lkJywgdW5pdElkKVxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuc2luZ2xlKCk7XG4gICAgXG4gICAgaWYgKHVwZGF0ZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyB1bml0OicsIHVwZGF0ZUVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHVwZGF0ZSB1bml0OiAke3VwZGF0ZUVycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB1cGRhdGVkVW5pdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhc3NpZ25pbmcgUVIgY29kZSB0byB1bml0OicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufSAiXSwibmFtZXMiOlsiUVJDb2RlIiwiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkiLCJzdXBhYmFzZSIsImdldEJhc2VPcmRlclVybCIsIk5FWFRfUFVCTElDX0FQUF9VUkwiLCJiYXNlVXJsIiwiZW5kc1dpdGgiLCJzbGljZSIsImNvbnNvbGUiLCJsb2ciLCJvcmlnaW4iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImVycm9yIiwiZ2VuZXJhdGVRUkNvZGVEYXRhVXJsIiwidW5pdElkIiwib3JkZXJVcmwiLCJkYXRhVXJsIiwidG9EYXRhVVJMIiwid2lkdGgiLCJtYXJnaW4iLCJjb2xvciIsImRhcmsiLCJsaWdodCIsIkVycm9yIiwiZ2VuZXJhdGVBbmRVcGxvYWRRUkNvZGUiLCJ1bml0TnVtYmVyIiwiYnVpbGRpbmdJZCIsInFyQ29kZURhdGFVcmwiLCJzdWJzdHJpbmciLCJibG9iIiwiZmV0Y2giLCJmaWxlIiwiRmlsZSIsInR5cGUiLCJuYW1lIiwic2l6ZSIsImRhdGEiLCJidWNrZXRzIiwiYnVja2V0c0Vycm9yIiwic3RvcmFnZSIsImxpc3RCdWNrZXRzIiwibWFwIiwiYiIsImpvaW4iLCJidWNrZXRFeGlzdHMiLCJzb21lIiwiYnVja2V0IiwiY3JlYXRlQnVja2V0IiwicHVibGljIiwiY3JlYXRlRXJyb3IiLCJidWNrZXRDaGVja0Vycm9yIiwiZm9sZGVyUGF0aCIsImZvbGRlckVycm9yIiwiZnJvbSIsInVwbG9hZCIsInVwc2VydCIsImNvbnRlbnRUeXBlIiwibWVzc2FnZSIsInVybERhdGEiLCJnZXRQdWJsaWNVcmwiLCJwdWJsaWNVcmwiLCJyZXNwb25zZSIsIm1ldGhvZCIsInN0YXR1cyIsInZlcmlmeUVycm9yIiwid2FybiIsImFzc2lnblFSQ29kZVRvVW5pdCIsInVuaXQiLCJ1bml0RXJyb3IiLCJzZWxlY3QiLCJlcSIsInNpbmdsZSIsInFyQ29kZVVybCIsImlkIiwidW5pdF9udW1iZXIiLCJidWlsZGluZ19pZCIsInVwZGF0ZURhdGEiLCJxcl9jb2RlX3VybCIsInVwZGF0ZWRVbml0IiwidXBkYXRlRXJyb3IiLCJ1cGRhdGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/qrcode.ts\n"));

/***/ })

});