"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/order/page",{

/***/ "(app-pages-browser)/./app/services/service.ts":
/*!*********************************!*\
  !*** ./app/services/service.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createService: () => (/* binding */ createService),\n/* harmony export */   deleteService: () => (/* binding */ deleteService),\n/* harmony export */   getService: () => (/* binding */ getService),\n/* harmony export */   getServices: () => (/* binding */ getServices),\n/* harmony export */   updateService: () => (/* binding */ updateService)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Initialize Supabase client\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\" || 0;\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\" || 0;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\nconst getServices = async (category, building_id)=>{\n    try {\n        // Guest mode - if building_id is provided, we don't need to check user auth\n        // This allows guests viewing the services to see items without logging in\n        if (building_id) {\n            let query = supabase.from('services').select('*').eq('building_id', building_id).order('name');\n            if (category) {\n                query = query.eq('category', category);\n            }\n            const { data, error } = await query;\n            if (error) {\n                console.error('Error fetching services:', error);\n                throw new Error(error.message);\n            }\n            return data || [];\n        }\n        // Admin mode - get user's buildings and filter services\n        const { data: { user }, error: userError } = await supabase.auth.getUser();\n        if (userError) {\n            console.error('Auth error:', userError);\n            throw new Error(\"Failed to get current user: \".concat(userError.message));\n        }\n        if (!user) {\n            console.warn('No authenticated user found');\n            return [];\n        }\n        // Get the buildings owned by this user\n        const { data: userBuildings, error: buildingsError } = await supabase.from('buildings').select('id').eq('user_id', user.id);\n        if (buildingsError) {\n            console.error('Supabase error fetching buildings:', buildingsError);\n            throw new Error(\"Failed to fetch user buildings: \".concat(buildingsError.message));\n        }\n        const userBuildingIds = (userBuildings === null || userBuildings === void 0 ? void 0 : userBuildings.map((b)=>b.id)) || [];\n        if (userBuildingIds.length === 0) {\n            return [];\n        }\n        let query = supabase.from('services').select('*').in('building_id', userBuildingIds).order('name');\n        if (category) {\n            query = query.eq('category', category);\n        }\n        const { data, error } = await query;\n        if (error) {\n            console.error('Error fetching services:', error);\n            throw new Error(error.message);\n        }\n        return data || [];\n    } catch (error) {\n        console.error('Error in getServices:', error);\n        throw error;\n    }\n};\nconst getService = async (id)=>{\n    try {\n        // First get the service\n        const { data, error } = await supabase.from('services').select('*').eq('id', id).single();\n        if (error) {\n            console.error('Error fetching service:', error);\n            throw new Error(error.message);\n        }\n        // For admin operations, check if this belongs to user's building\n        if (id && \"object\" !== 'undefined') {\n            // Check if we're in admin mode (not the order page)\n            const isAdminMode = !window.location.pathname.startsWith('/order');\n            if (isAdminMode) {\n                // Get the current user\n                const { data: { user } } = await supabase.auth.getUser();\n                if (user) {\n                    // Verify this service belongs to a building owned by the user\n                    const { data: buildingCheck } = await supabase.from('buildings').select('id').eq('id', data.building_id).eq('user_id', user.id).single();\n                    if (!buildingCheck) {\n                        throw new Error('You do not have permission to access this service');\n                    }\n                }\n            }\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in getService:', error);\n        throw error;\n    }\n};\nconst createService = async (service)=>{\n    try {\n        // Get the current authenticated user\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n            throw new Error('You must be logged in to create a service');\n        }\n        // Check if the building belongs to the user\n        if (service.building_id) {\n            const { data: buildingCheck } = await supabase.from('buildings').select('id').eq('id', service.building_id).eq('user_id', user.id).single();\n            if (!buildingCheck) {\n                throw new Error('You do not have permission to add services to this building');\n            }\n        }\n        const { data, error } = await supabase.from('services').insert([\n            service\n        ]).select().single();\n        if (error) {\n            console.error('Error creating service:', error);\n            throw new Error(error.message);\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in createService:', error);\n        throw error;\n    }\n};\nconst updateService = async (service)=>{\n    try {\n        // Get the current authenticated user\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n            throw new Error('You must be logged in to update a service');\n        }\n        // Get the service's building_id first\n        const { data: existingService } = await supabase.from('services').select('building_id').eq('id', service.id).single();\n        if (existingService && existingService.building_id) {\n            // Check if the building belongs to the user\n            const { data: buildingCheck } = await supabase.from('buildings').select('id').eq('id', existingService.building_id).eq('user_id', user.id).single();\n            if (!buildingCheck) {\n                throw new Error('You do not have permission to update this service');\n            }\n        }\n        const { data, error } = await supabase.from('services').update(service).eq('id', service.id).select().single();\n        if (error) {\n            console.error('Error updating service:', error);\n            throw new Error(error.message);\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in updateService:', error);\n        throw error;\n    }\n};\nconst deleteService = async (id)=>{\n    try {\n        // Get the current authenticated user\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n            throw new Error('You must be logged in to delete a service');\n        }\n        // Get the service's building_id first\n        const { data: existingService } = await supabase.from('services').select('building_id').eq('id', id).single();\n        if (existingService && existingService.building_id) {\n            // Check if the building belongs to the user\n            const { data: buildingCheck } = await supabase.from('buildings').select('id').eq('id', existingService.building_id).eq('user_id', user.id).single();\n            if (!buildingCheck) {\n                throw new Error('You do not have permission to delete this service');\n            }\n        }\n        const { error } = await supabase.from('services').delete().eq('id', id);\n        if (error) {\n            console.error('Error deleting service:', error);\n            throw new Error(error.message);\n        }\n    } catch (error) {\n        console.error('Error in deleteService:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/service.ts\n"));

/***/ })

});