"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/order/page",{

/***/ "(app-pages-browser)/./app/services/units.ts":
/*!*******************************!*\
  !*** ./app/services/units.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUnit: () => (/* binding */ createUnit),\n/* harmony export */   deleteUnit: () => (/* binding */ deleteUnit),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   getUnits: () => (/* binding */ getUnits),\n/* harmony export */   updateUnit: () => (/* binding */ updateUnit)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _qrcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./qrcode */ \"(app-pages-browser)/./app/services/qrcode.ts\");\n\n\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\nasync function getUnits(buildingId) {\n    try {\n        console.log(\"Fetching units\".concat(buildingId ? \" for building: \".concat(buildingId) : ''));\n        // Build the URL with query parameters\n        let url = \"\".concat(supabaseUrl, \"/rest/v1/units?select=*&order=unit_number\");\n        if (buildingId) {\n            url += \"&building_id=eq.\".concat(encodeURIComponent(buildingId));\n        }\n        // Use direct fetch with proper headers to avoid 406 errors\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseAnonKey,\n                'Authorization': \"Bearer \".concat(supabaseAnonKey),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Prefer': 'return=representation'\n            }\n        });\n        // Log the response status for debugging\n        console.log(\"Units fetch response status: \".concat(response.status, \" \").concat(response.statusText));\n        if (!response.ok) {\n            console.error(\"Error fetching units: \".concat(response.status, \" \").concat(response.statusText));\n            // If we get a 406 error, try an alternative approach\n            if (response.status === 406) {\n                console.log('Attempting alternative fetch method for units due to 406 error');\n                return await fetchUnitsAlternative(buildingId);\n            }\n            throw new Error(\"Failed to fetch units: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        console.log(\"Successfully fetched \".concat(data.length, \" units\"));\n        return data;\n    } catch (error) {\n        console.error('Error in getUnits:', error);\n        throw error;\n    }\n}\n// Alternative fetch method if the main one fails with 406\nasync function fetchUnitsAlternative(buildingId) {\n    try {\n        console.log(\"Using alternative fetch method for units\".concat(buildingId ? \" for building: \".concat(buildingId) : ''));\n        // Build the URL with query parameters\n        let url = \"\".concat(supabaseUrl, \"/rest/v1/units?select=*&order=unit_number\");\n        if (buildingId) {\n            url += \"&building_id=eq.\".concat(encodeURIComponent(buildingId));\n        }\n        // Try a simpler fetch with minimal headers\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseAnonKey,\n                'Authorization': \"Bearer \".concat(supabaseAnonKey)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Alternative fetch failed: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error in fetchUnitsAlternative:', error);\n        throw error;\n    }\n}\nasync function getUnit(id) {\n    try {\n        console.log(\"Fetching unit with ID: \".concat(id));\n        // Use direct fetch API with proper headers and limit parameter\n        const response = await fetch(\"\".concat(supabaseUrl, \"/rest/v1/units?id=eq.\").concat(encodeURIComponent(id), \"&limit=1\"), {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseAnonKey,\n                'Authorization': \"Bearer \".concat(supabaseAnonKey),\n                // Explicitly set Accept header to avoid 406 errors\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Prefer': 'return=representation'\n            }\n        });\n        // Log the full response for debugging\n        console.log(\"Unit fetch response status: \".concat(response.status, \" \").concat(response.statusText));\n        if (!response.ok) {\n            console.error(\"Error fetching unit: \".concat(response.status, \" \").concat(response.statusText));\n            // If we get a 406 error, try an alternative approach\n            if (response.status === 406) {\n                console.log('Attempting alternative fetch method for unit due to 406 error');\n                return await fetchUnitAlternative(id);\n            }\n            throw new Error(\"Failed to fetch unit: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const units = await response.json();\n        console.log(\"Received data for unit query:\", units);\n        if (!units || units.length === 0) {\n            console.error(\"Unit not found with ID: \".concat(id));\n            throw new Error(\"Unit not found with ID: \".concat(id));\n        }\n        return units[0];\n    } catch (error) {\n        console.error(\"Failed to fetch unit (\".concat(id, \"):\"), error);\n        throw error;\n    }\n}\n// Alternative fetch method if the main one fails with 406\nasync function fetchUnitAlternative(id) {\n    try {\n        console.log(\"Using alternative fetch method for unit with ID: \".concat(id));\n        // Try a simpler fetch with minimal headers\n        const response = await fetch(\"\".concat(supabaseUrl, \"/rest/v1/units?id=eq.\").concat(encodeURIComponent(id), \"&limit=1\"), {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseAnonKey,\n                'Authorization': \"Bearer \".concat(supabaseAnonKey)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Alternative fetch failed: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const units = await response.json();\n        if (!units || units.length === 0) {\n            throw new Error(\"Unit not found with ID: \".concat(id, \" (alternative method)\"));\n        }\n        return units[0];\n    } catch (error) {\n        console.error(\"Failed with alternative fetch for unit (\".concat(id, \"):\"), error);\n        throw error;\n    }\n}\nasync function createUnit(unit) {\n    try {\n        console.log('[Unit Debug] Creating new unit:', unit);\n        // First create the unit without QR code\n        const { data, error } = await supabase.from('units').insert([\n            unit\n        ]).select().single();\n        if (error) {\n            console.error('[Unit Debug] Supabase error creating unit:', error);\n            throw error;\n        }\n        console.log('[Unit Debug] Unit created successfully:', data);\n        // Now generate and assign QR code\n        try {\n            console.log('[Unit Debug] Starting QR code generation for unit:', data.id);\n            const qrCodeUrl = await (0,_qrcode__WEBPACK_IMPORTED_MODULE_0__.generateAndUploadQRCode)(data.id, data.unit_number, data.building_id);\n            console.log('[Unit Debug] QR code generated, URL:', qrCodeUrl);\n            // Update the unit with the QR code URL\n            console.log('[Unit Debug] Updating unit with QR code URL');\n            const { data: updatedData, error: updateError } = await supabase.from('units').update({\n                qr_code_url: qrCodeUrl\n            }).eq('id', data.id).select().single();\n            if (updateError) {\n                console.error('[Unit Debug] Error updating unit with QR code:', updateError);\n                // Still return the unit even if QR code assignment fails\n                return data;\n            }\n            console.log('[Unit Debug] Unit updated with QR code URL successfully:', updatedData);\n            return updatedData;\n        } catch (qrError) {\n            console.error('[Unit Debug] Error generating QR code:', qrError);\n            // Return the unit without QR code if generation fails\n            return data;\n        }\n    } catch (error) {\n        console.error('[Unit Debug] Error in createUnit:', error);\n        throw error;\n    }\n}\nasync function updateUnit(unit) {\n    try {\n        const { data, error } = await supabase.from('units').update(unit).eq('id', unit.id).select().single();\n        if (error) {\n            console.error('Supabase error:', error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in updateUnit:', error);\n        throw error;\n    }\n}\nasync function deleteUnit(id) {\n    try {\n        const { error } = await supabase.from('units').delete().eq('id', id);\n        if (error) {\n            console.error('Supabase error:', error);\n            throw error;\n        }\n    } catch (error) {\n        console.error('Error in deleteUnit:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/units.ts\n"));

/***/ })

});