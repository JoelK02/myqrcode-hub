"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/order/page",{

/***/ "(app-pages-browser)/./app/services/service.ts":
/*!*********************************!*\
  !*** ./app/services/service.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createService: () => (/* binding */ createService),\n/* harmony export */   deleteService: () => (/* binding */ deleteService),\n/* harmony export */   getService: () => (/* binding */ getService),\n/* harmony export */   getServices: () => (/* binding */ getServices),\n/* harmony export */   updateService: () => (/* binding */ updateService)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Initialize Supabase client\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\" || 0;\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\" || 0;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseKey);\nconst getServices = async (category)=>{\n    try {\n        console.log(\"Fetching services\".concat(category ? \" for category: \".concat(category) : ''));\n        // Build the URL with query parameters\n        let url = \"\".concat(supabaseUrl, \"/rest/v1/services?select=*&order=name\");\n        if (category) {\n            url += \"&category=eq.\".concat(encodeURIComponent(category));\n        }\n        // Use direct fetch with proper headers to avoid 406 errors\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseKey,\n                'Authorization': \"Bearer \".concat(supabaseKey),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Prefer': 'return=representation'\n            }\n        });\n        if (!response.ok) {\n            console.error(\"Error fetching services: \".concat(response.status, \" \").concat(response.statusText));\n            // If we get a 406 error, try an alternative approach\n            if (response.status === 406) {\n                console.log('Attempting alternative fetch method for services due to 406 error');\n                return await fetchServicesAlternative(category);\n            }\n            throw new Error(\"Failed to fetch services: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        console.log(\"Successfully fetched \".concat(data.length, \" services\"));\n        return data;\n    } catch (error) {\n        console.error('Error in getServices:', error);\n        throw error;\n    }\n};\n// Alternative fetch method if the main one fails with 406\nconst fetchServicesAlternative = async (category)=>{\n    try {\n        console.log(\"Using alternative fetch method for services\".concat(category ? \" for category: \".concat(category) : ''));\n        // Build the URL with query parameters\n        let url = \"\".concat(supabaseUrl, \"/rest/v1/services?select=*&order=name\");\n        if (category) {\n            url += \"&category=eq.\".concat(encodeURIComponent(category));\n        }\n        // Try a simpler fetch with minimal headers\n        const response = await fetch(url, {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseKey,\n                'Authorization': \"Bearer \".concat(supabaseKey)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Alternative fetch failed: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error in fetchServicesAlternative:', error);\n        throw error;\n    }\n};\nconst getService = async (id)=>{\n    try {\n        console.log(\"Fetching service with ID: \".concat(id));\n        // Use direct fetch with proper headers to avoid 406 errors\n        const response = await fetch(\"\".concat(supabaseUrl, \"/rest/v1/services?id=eq.\").concat(encodeURIComponent(id), \"&limit=1\"), {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseKey,\n                'Authorization': \"Bearer \".concat(supabaseKey),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Prefer': 'return=representation'\n            }\n        });\n        if (!response.ok) {\n            console.error(\"Error fetching service: \".concat(response.status, \" \").concat(response.statusText));\n            // If we get a 406 error, try an alternative approach\n            if (response.status === 406) {\n                console.log('Attempting alternative fetch method for service due to 406 error');\n                return await fetchServiceAlternative(id);\n            }\n            throw new Error(\"Failed to fetch service: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        if (!data || data.length === 0) {\n            throw new Error(\"Service not found with ID: \".concat(id));\n        }\n        console.log(\"Successfully fetched service: \".concat(data[0].name));\n        return data[0];\n    } catch (error) {\n        console.error('Error in getService:', error);\n        throw error;\n    }\n};\n// Alternative fetch method if the main one fails with 406\nconst fetchServiceAlternative = async (id)=>{\n    try {\n        console.log(\"Using alternative fetch method for service with ID: \".concat(id));\n        // Try a simpler fetch with minimal headers\n        const response = await fetch(\"\".concat(supabaseUrl, \"/rest/v1/services?id=eq.\").concat(encodeURIComponent(id), \"&limit=1\"), {\n            method: 'GET',\n            headers: {\n                'apikey': supabaseKey,\n                'Authorization': \"Bearer \".concat(supabaseKey)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Alternative fetch failed: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const data = await response.json();\n        if (!data || data.length === 0) {\n            throw new Error(\"Service not found with ID: \".concat(id, \" (alternative method)\"));\n        }\n        return data[0];\n    } catch (error) {\n        console.error(\"Failed with alternative fetch for service (\".concat(id, \"):\"), error);\n        throw error;\n    }\n};\nconst createService = async (service)=>{\n    try {\n        const { data, error } = await supabase.from('services').insert(service).select().single();\n        if (error) {\n            console.error('Error creating service:', error);\n            throw new Error(error.message);\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in createService:', error);\n        throw error;\n    }\n};\nconst updateService = async (service)=>{\n    try {\n        const { id, ...serviceData } = service;\n        const { data, error } = await supabase.from('services').update(serviceData).eq('id', id).select().single();\n        if (error) {\n            console.error('Error updating service:', error);\n            throw new Error(error.message);\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in updateService:', error);\n        throw error;\n    }\n};\nconst deleteService = async (id)=>{\n    try {\n        const { error } = await supabase.from('services').delete().eq('id', id);\n        if (error) {\n            console.error('Error deleting service:', error);\n            throw new Error(error.message);\n        }\n    } catch (error) {\n        console.error('Error in deleteService:', error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/service.ts\n"));

/***/ })

});