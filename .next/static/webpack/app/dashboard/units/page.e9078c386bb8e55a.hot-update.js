"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/units/page",{

/***/ "(app-pages-browser)/./app/services/qrcode.ts":
/*!********************************!*\
  !*** ./app/services/qrcode.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignQRCodeToUnit: () => (/* binding */ assignQRCodeToUnit),\n/* harmony export */   generateAndUploadQRCode: () => (/* binding */ generateAndUploadQRCode),\n/* harmony export */   generateQRCodeDataUrl: () => (/* binding */ generateQRCodeDataUrl)\n/* harmony export */ });\n/* harmony import */ var qrcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qrcode */ \"(app-pages-browser)/./node_modules/qrcode/lib/browser.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\n// Base URL for the guest ordering page\nconst getBaseOrderUrl = ()=>{\n    // First prioritize environment variable\n    if (true) {\n        return \"\".concat(\"https://myqrcode-hub.vercel.app\", \"/order\");\n    }\n    // Fall back to client-side origin detection only if env var isn't available\n    if (true) {\n        return \"\".concat(window.location.origin, \"/order\");\n    }\n    // Last resort fallback\n    return 'https://myqrcode-hub.vercel.app/order';\n};\n// Generate a QR code data URL \nasync function generateQRCodeDataUrl(unitId) {\n    try {\n        const orderUrl = \"\".concat(getBaseOrderUrl(), \"?unit=\").concat(unitId);\n        // Generate QR code data URL\n        const dataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_0__.toDataURL(orderUrl, {\n            width: 300,\n            margin: 2,\n            color: {\n                dark: '#000000',\n                light: '#FFFFFF'\n            }\n        });\n        return dataUrl;\n    } catch (error) {\n        console.error('Error generating QR code:', error);\n        throw new Error('Failed to generate QR code');\n    }\n}\n// Generate a QR code and upload to Supabase storage\nasync function generateAndUploadQRCode(unitId, unitNumber, buildingId) {\n    try {\n        console.log(\"[QR Debug] Starting QR code generation for unit: \".concat(unitId, \", building: \").concat(buildingId));\n        const orderUrl = \"\".concat(getBaseOrderUrl(), \"?unit=\").concat(unitId);\n        console.log(\"[QR Debug] Generated order URL: \".concat(orderUrl));\n        // Generate QR code as data URL instead of buffer\n        const qrCodeDataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_0__.toDataURL(orderUrl, {\n            width: 300,\n            margin: 2,\n            color: {\n                dark: '#000000',\n                light: '#FFFFFF'\n            }\n        });\n        console.log(\"[QR Debug] QR code data URL generated successfully (truncated): \".concat(qrCodeDataUrl.substring(0, 50), \"...\"));\n        // Convert data URL to File object for upload\n        const blob = await (await fetch(qrCodeDataUrl)).blob();\n        const file = new File([\n            blob\n        ], \"unit-\".concat(unitId, \".png\"), {\n            type: 'image/png'\n        });\n        console.log(\"[QR Debug] Created File object for upload: \".concat(file.name, \", size: \").concat(file.size, \" bytes\"));\n        // Check if bucket exists\n        try {\n            const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();\n            if (bucketsError) {\n                console.error('[QR Debug] Error listing buckets:', bucketsError);\n            } else {\n                console.log('[QR Debug] Available buckets:', buckets.map((b)=>b.name).join(', '));\n                const bucketExists = buckets.some((bucket)=>bucket.name === 'qrcodes');\n                console.log(\"[QR Debug] Bucket 'qrcodes' exists: \".concat(bucketExists));\n                if (!bucketExists) {\n                    console.error('[QR Debug] The qrcodes bucket does not exist in your Supabase storage!');\n                    // Try to create the bucket\n                    try {\n                        const { data, error } = await supabase.storage.createBucket('qrcodes', {\n                            public: true\n                        });\n                        console.log('[QR Debug] Attempted to create qrcodes bucket:', data, error);\n                    } catch (createError) {\n                        console.error('[QR Debug] Failed to create bucket:', createError);\n                    }\n                }\n            }\n        } catch (bucketCheckError) {\n            console.error('[QR Debug] Error checking buckets:', bucketCheckError);\n        }\n        // Upload the QR code to Supabase Storage\n        console.log(\"[QR Debug] Attempting to upload to path: units/\".concat(buildingId, \"/\").concat(unitId, \".png\"));\n        // Make sure the path exists\n        try {\n            // Create folders structure if needed\n            const folderPath = \"units/\".concat(buildingId);\n            console.log(\"[QR Debug] Creating folder path: \".concat(folderPath));\n        } catch (folderError) {\n            console.error('[QR Debug] Error with folder:', folderError);\n        }\n        const { data, error } = await supabase.storage.from('qrcodes').upload(\"units/\".concat(buildingId, \"/\").concat(unitId, \".png\"), file, {\n            upsert: true,\n            contentType: 'image/png'\n        });\n        if (error) {\n            console.error('[QR Debug] Error uploading QR code:', error);\n            throw new Error(\"Failed to upload QR code: \".concat(error.message));\n        }\n        console.log('[QR Debug] Upload successful:', data);\n        // Get the public URL\n        const { data: urlData } = supabase.storage.from('qrcodes').getPublicUrl(\"units/\".concat(buildingId, \"/\").concat(unitId, \".png\"));\n        console.log('[QR Debug] Generated public URL:', urlData.publicUrl);\n        // Verify the URL by checking if it returns a valid response\n        try {\n            const response = await fetch(urlData.publicUrl, {\n                method: 'HEAD'\n            });\n            console.log(\"[QR Debug] URL verification status: \".concat(response.status));\n        } catch (verifyError) {\n            console.warn('[QR Debug] Could not verify URL:', verifyError);\n        }\n        return urlData.publicUrl;\n    } catch (error) {\n        console.error('[QR Debug] Error generating or uploading QR code:', error);\n        throw new Error('Failed to generate or upload QR code');\n    }\n}\n// Assign a QR code to a unit\nasync function assignQRCodeToUnit(unitId) {\n    try {\n        // Get unit details\n        const { data: unit, error: unitError } = await supabase.from('units').select('*').eq('id', unitId).single();\n        if (unitError) {\n            console.error('Error getting unit:', unitError);\n            throw new Error(\"Failed to get unit: \".concat(unitError.message));\n        }\n        // Generate and upload QR code\n        const qrCodeUrl = await generateAndUploadQRCode(unit.id, unit.unit_number, unit.building_id);\n        // Update unit with QR code URL\n        const updateData = {\n            id: unitId,\n            qr_code_url: qrCodeUrl\n        };\n        const { data: updatedUnit, error: updateError } = await supabase.from('units').update({\n            qr_code_url: qrCodeUrl\n        }).eq('id', unitId).select().single();\n        if (updateError) {\n            console.error('Error updating unit:', updateError);\n            throw new Error(\"Failed to update unit: \".concat(updateError.message));\n        }\n        return updatedUnit;\n    } catch (error) {\n        console.error('Error assigning QR code to unit:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9zZXJ2aWNlcy9xcmNvZGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEI7QUFDeUI7QUFHckQsTUFBTUUsY0FBY0MsMENBQW9DO0FBQ3hELE1BQU1HLGtCQUFrQkgsa05BQXlDO0FBQ2pFLE1BQU1LLFdBQVdQLG1FQUFZQSxDQUFDQyxhQUFhSTtBQUUzQyx1Q0FBdUM7QUFDdkMsTUFBTUcsa0JBQWtCO0lBQ3RCLHdDQUF3QztJQUN4QyxJQUFJTixJQUErQixFQUFFO1FBQ25DLE9BQU8sR0FBbUMsT0FBaENBLGlDQUErQixFQUFDO0lBQzVDO0lBRUEsNEVBQTRFO0lBQzVFLElBQUksSUFBNkIsRUFBRTtRQUNqQyxPQUFPLEdBQTBCLE9BQXZCUSxPQUFPQyxRQUFRLENBQUNDLE1BQU0sRUFBQztJQUNuQztJQUVBLHVCQUF1QjtJQUN2QixPQUFPO0FBQ1Q7QUFFQSwrQkFBK0I7QUFDeEIsZUFBZUMsc0JBQXNCQyxNQUFjO0lBQ3hELElBQUk7UUFDRixNQUFNQyxXQUFXLEdBQTZCRCxPQUExQk4sbUJBQWtCLFVBQWUsT0FBUE07UUFFOUMsNEJBQTRCO1FBQzVCLE1BQU1FLFVBQVUsTUFBTWpCLDZDQUFnQixDQUFDZ0IsVUFBVTtZQUMvQ0csT0FBTztZQUNQQyxRQUFRO1lBQ1JDLE9BQU87Z0JBQ0xDLE1BQU07Z0JBQ05DLE9BQU87WUFDVDtRQUNGO1FBRUEsT0FBT047SUFDVCxFQUFFLE9BQU9PLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDZCQUE2QkE7UUFDM0MsTUFBTSxJQUFJRSxNQUFNO0lBQ2xCO0FBQ0Y7QUFFQSxvREFBb0Q7QUFDN0MsZUFBZUMsd0JBQXdCWixNQUFjLEVBQUVhLFVBQWtCLEVBQUVDLFVBQWtCO0lBQ2xHLElBQUk7UUFDRkosUUFBUUssR0FBRyxDQUFDLG9EQUF5RUQsT0FBckJkLFFBQU8sZ0JBQXlCLE9BQVhjO1FBQ3JGLE1BQU1iLFdBQVcsR0FBNkJELE9BQTFCTixtQkFBa0IsVUFB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V0FBVyxFQUFFLEdBQUcsTUFBTTNFLFNBQ3JEaUQsSUFBSSxDQUFDLFNBQ0wyQixNQUFNLENBQUM7WUFBRUgsYUFBYUw7UUFBVSxHQUNoQ0YsRUFBRSxDQUFDLE1BQU0zRCxRQUNUMEQsTUFBTSxHQUNORSxNQUFNO1FBRVQsSUFBSVEsYUFBYTtZQUNmMUQsUUFBUUQsS0FBSyxDQUFDLHdCQUF3QjJEO1lBQ3RDLE1BQU0sSUFBSXpELE1BQU0sMEJBQThDLE9BQXBCeUQsWUFBWXRCLE9BQU87UUFDL0Q7UUFFQSxPQUFPcUI7SUFDVCxFQUFFLE9BQU8xRCxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxvQ0FBb0NBO1FBQ2xELE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2pvZWxrd29oL0RvY3VtZW50cy9HaXRIdWIvbXlxcmNvZGUtaHViL2FwcC9zZXJ2aWNlcy9xcmNvZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFFSQ29kZSBmcm9tICdxcmNvZGUnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcbmltcG9ydCB7IFVuaXQsIFVwZGF0ZVVuaXRJbnB1dCB9IGZyb20gJy4uL3R5cGVzL3VuaXRzJztcblxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhO1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9LRVkhO1xuY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSk7XG5cbi8vIEJhc2UgVVJMIGZvciB0aGUgZ3Vlc3Qgb3JkZXJpbmcgcGFnZVxuY29uc3QgZ2V0QmFzZU9yZGVyVXJsID0gKCkgPT4ge1xuICAvLyBGaXJzdCBwcmlvcml0aXplIGVudmlyb25tZW50IHZhcmlhYmxlXG4gIGlmIChwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUFBfVVJMKSB7XG4gICAgcmV0dXJuIGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQUF9VUkx9L29yZGVyYDtcbiAgfVxuICBcbiAgLy8gRmFsbCBiYWNrIHRvIGNsaWVudC1zaWRlIG9yaWdpbiBkZXRlY3Rpb24gb25seSBpZiBlbnYgdmFyIGlzbid0IGF2YWlsYWJsZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vb3JkZXJgO1xuICB9XG4gIFxuICAvLyBMYXN0IHJlc29ydCBmYWxsYmFja1xuICByZXR1cm4gJ2h0dHBzOi8vbXlxcmNvZGUtaHViLnZlcmNlbC5hcHAvb3JkZXInO1xufTtcblxuLy8gR2VuZXJhdGUgYSBRUiBjb2RlIGRhdGEgVVJMIFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlUVJDb2RlRGF0YVVybCh1bml0SWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3JkZXJVcmwgPSBgJHtnZXRCYXNlT3JkZXJVcmwoKX0/dW5pdD0ke3VuaXRJZH1gO1xuICAgIFxuICAgIC8vIEdlbmVyYXRlIFFSIGNvZGUgZGF0YSBVUkxcbiAgICBjb25zdCBkYXRhVXJsID0gYXdhaXQgUVJDb2RlLnRvRGF0YVVSTChvcmRlclVybCwge1xuICAgICAgd2lkdGg6IDMwMCxcbiAgICAgIG1hcmdpbjogMixcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIGRhcms6ICcjMDAwMDAwJyxcbiAgICAgICAgbGlnaHQ6ICcjRkZGRkZGJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGRhdGFVcmw7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBRUiBjb2RlOicsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBRUiBjb2RlJyk7XG4gIH1cbn1cblxuLy8gR2VuZXJhdGUgYSBRUiBjb2RlIGFuZCB1cGxvYWQgdG8gU3VwYWJhc2Ugc3RvcmFnZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQW5kVXBsb2FkUVJDb2RlKHVuaXRJZDogc3RyaW5nLCB1bml0TnVtYmVyOiBzdHJpbmcsIGJ1aWxkaW5nSWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coYFtRUiBEZWJ1Z10gU3RhcnRpbmcgUVIgY29kZSBnZW5lcmF0aW9uIGZvciB1bml0OiAke3VuaXRJZH0sIGJ1aWxkaW5nOiAke2J1aWxkaW5nSWR9YCk7XG4gICAgY29uc3Qgb3JkZXJVcmwgPSBgJHtnZXRCYXNlT3JkZXJVcmwoKX0/dW5pdD0ke3VuaXRJZH1gO1xuICAgIGNvbnNvbGUubG9nKGBbUVIgRGVidWddIEdlbmVyYXRlZCBvcmRlciBVUkw6ICR7b3JkZXJVcmx9YCk7XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgUVIgY29kZSBhcyBkYXRhIFVSTCBpbnN0ZWFkIG9mIGJ1ZmZlclxuICAgIGNvbnN0IHFyQ29kZURhdGFVcmwgPSBhd2FpdCBRUkNvZGUudG9EYXRhVVJMKG9yZGVyVXJsLCB7XG4gICAgICB3aWR0aDogMzAwLFxuICAgICAgbWFyZ2luOiAyLFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgZGFyazogJyMwMDAwMDAnLFxuICAgICAgICBsaWdodDogJyNGRkZGRkYnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBRUiBjb2RlIGRhdGEgVVJMIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkgKHRydW5jYXRlZCk6ICR7cXJDb2RlRGF0YVVybC5zdWJzdHJpbmcoMCwgNTApfS4uLmApO1xuICAgIFxuICAgIC8vIENvbnZlcnQgZGF0YSBVUkwgdG8gRmlsZSBvYmplY3QgZm9yIHVwbG9hZFxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCAoYXdhaXQgZmV0Y2gocXJDb2RlRGF0YVVybCkpLmJsb2IoKTtcbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoW2Jsb2JdLCBgdW5pdC0ke3VuaXRJZH0ucG5nYCwgeyB0eXBlOiAnaW1hZ2UvcG5nJyB9KTtcbiAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBDcmVhdGVkIEZpbGUgb2JqZWN0IGZvciB1cGxvYWQ6ICR7ZmlsZS5uYW1lfSwgc2l6ZTogJHtmaWxlLnNpemV9IGJ5dGVzYCk7XG4gICAgXG4gICAgLy8gQ2hlY2sgaWYgYnVja2V0IGV4aXN0c1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGE6IGJ1Y2tldHMsIGVycm9yOiBidWNrZXRzRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2UubGlzdEJ1Y2tldHMoKTtcbiAgICAgIFxuICAgICAgaWYgKGJ1Y2tldHNFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbUVIgRGVidWddIEVycm9yIGxpc3RpbmcgYnVja2V0czonLCBidWNrZXRzRXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tRUiBEZWJ1Z10gQXZhaWxhYmxlIGJ1Y2tldHM6JywgYnVja2V0cy5tYXAoYiA9PiBiLm5hbWUpLmpvaW4oJywgJykpO1xuICAgICAgICBjb25zdCBidWNrZXRFeGlzdHMgPSBidWNrZXRzLnNvbWUoYnVja2V0ID0+IGJ1Y2tldC5uYW1lID09PSAncXJjb2RlcycpO1xuICAgICAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBCdWNrZXQgJ3FyY29kZXMnIGV4aXN0czogJHtidWNrZXRFeGlzdHN9YCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWJ1Y2tldEV4aXN0cykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBEZWJ1Z10gVGhlIHFyY29kZXMgYnVja2V0IGRvZXMgbm90IGV4aXN0IGluIHlvdXIgU3VwYWJhc2Ugc3RvcmFnZSEnKTtcbiAgICAgICAgICAvLyBUcnkgdG8gY3JlYXRlIHRoZSBidWNrZXRcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZS5jcmVhdGVCdWNrZXQoJ3FyY29kZXMnLCB7IHB1YmxpYzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUVIgRGVidWddIEF0dGVtcHRlZCB0byBjcmVhdGUgcXJjb2RlcyBidWNrZXQ6JywgZGF0YSwgZXJyb3IpO1xuICAgICAgICAgIH0gY2F0Y2ggKGNyZWF0ZUVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbUVIgRGVidWddIEZhaWxlZCB0byBjcmVhdGUgYnVja2V0OicsIGNyZWF0ZUVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChidWNrZXRDaGVja0Vycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbUVIgRGVidWddIEVycm9yIGNoZWNraW5nIGJ1Y2tldHM6JywgYnVja2V0Q2hlY2tFcnJvcik7XG4gICAgfVxuICAgIFxuICAgIC8vIFVwbG9hZCB0aGUgUVIgY29kZSB0byBTdXBhYmFzZSBTdG9yYWdlXG4gICAgY29uc29sZS5sb2coYFtRUiBEZWJ1Z10gQXR0ZW1wdGluZyB0byB1cGxvYWQgdG8gcGF0aDogdW5pdHMvJHtidWlsZGluZ0lkfS8ke3VuaXRJZH0ucG5nYCk7XG4gICAgXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBwYXRoIGV4aXN0c1xuICAgIHRyeSB7XG4gICAgICAvLyBDcmVhdGUgZm9sZGVycyBzdHJ1Y3R1cmUgaWYgbmVlZGVkXG4gICAgICBjb25zdCBmb2xkZXJQYXRoID0gYHVuaXRzLyR7YnVpbGRpbmdJZH1gO1xuICAgICAgY29uc29sZS5sb2coYFtRUiBEZWJ1Z10gQ3JlYXRpbmcgZm9sZGVyIHBhdGg6ICR7Zm9sZGVyUGF0aH1gKTtcbiAgICB9IGNhdGNoIChmb2xkZXJFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignW1FSIERlYnVnXSBFcnJvciB3aXRoIGZvbGRlcjonLCBmb2xkZXJFcnJvcik7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2VcbiAgICAgIC5mcm9tKCdxcmNvZGVzJylcbiAgICAgIC51cGxvYWQoYHVuaXRzLyR7YnVpbGRpbmdJZH0vJHt1bml0SWR9LnBuZ2AsIGZpbGUsIHtcbiAgICAgICAgdXBzZXJ0OiB0cnVlLFxuICAgICAgICBjb250ZW50VHlwZTogJ2ltYWdlL3BuZycsXG4gICAgICB9KTtcbiAgICBcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tRUiBEZWJ1Z10gRXJyb3IgdXBsb2FkaW5nIFFSIGNvZGU6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gdXBsb2FkIFFSIGNvZGU6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgXG4gICAgY29uc29sZS5sb2coJ1tRUiBEZWJ1Z10gVXBsb2FkIHN1Y2Nlc3NmdWw6JywgZGF0YSk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBwdWJsaWMgVVJMXG4gICAgY29uc3QgeyBkYXRhOiB1cmxEYXRhIH0gPSBzdXBhYmFzZS5zdG9yYWdlXG4gICAgICAuZnJvbSgncXJjb2RlcycpXG4gICAgICAuZ2V0UHVibGljVXJsKGB1bml0cy8ke2J1aWxkaW5nSWR9LyR7dW5pdElkfS5wbmdgKTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygnW1FSIERlYnVnXSBHZW5lcmF0ZWQgcHVibGljIFVSTDonLCB1cmxEYXRhLnB1YmxpY1VybCk7XG4gICAgXG4gICAgLy8gVmVyaWZ5IHRoZSBVUkwgYnkgY2hlY2tpbmcgaWYgaXQgcmV0dXJucyBhIHZhbGlkIHJlc3BvbnNlXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsRGF0YS5wdWJsaWNVcmwsIHsgbWV0aG9kOiAnSEVBRCcgfSk7XG4gICAgICBjb25zb2xlLmxvZyhgW1FSIERlYnVnXSBVUkwgdmVyaWZpY2F0aW9uIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgfSBjYXRjaCAodmVyaWZ5RXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignW1FSIERlYnVnXSBDb3VsZCBub3QgdmVyaWZ5IFVSTDonLCB2ZXJpZnlFcnJvcik7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB1cmxEYXRhLnB1YmxpY1VybDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbUVIgRGVidWddIEVycm9yIGdlbmVyYXRpbmcgb3IgdXBsb2FkaW5nIFFSIGNvZGU6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIG9yIHVwbG9hZCBRUiBjb2RlJyk7XG4gIH1cbn1cblxuLy8gQXNzaWduIGEgUVIgY29kZSB0byBhIHVuaXRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NpZ25RUkNvZGVUb1VuaXQodW5pdElkOiBzdHJpbmcpOiBQcm9taXNlPFVuaXQ+IHtcbiAgdHJ5IHtcbiAgICAvLyBHZXQgdW5pdCBkZXRhaWxzXG4gICAgY29uc3QgeyBkYXRhOiB1bml0LCBlcnJvcjogdW5pdEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3VuaXRzJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCdpZCcsIHVuaXRJZClcbiAgICAgIC5zaW5nbGUoKTtcbiAgICBcbiAgICBpZiAodW5pdEVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHVuaXQ6JywgdW5pdEVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGdldCB1bml0OiAke3VuaXRFcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBhbmQgdXBsb2FkIFFSIGNvZGVcbiAgICBjb25zdCBxckNvZGVVcmwgPSBhd2FpdCBnZW5lcmF0ZUFuZFVwbG9hZFFSQ29kZSh1bml0LmlkLCB1bml0LnVuaXRfbnVtYmVyLCB1bml0LmJ1aWxkaW5nX2lkKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgdW5pdCB3aXRoIFFSIGNvZGUgVVJMXG4gICAgY29uc3QgdXBkYXRlRGF0YTogVXBkYXRlVW5pdElucHV0ID0ge1xuICAgICAgaWQ6IHVuaXRJZCxcbiAgICAgIHFyX2NvZGVfdXJsOiBxckNvZGVVcmxcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHsgZGF0YTogdXBkYXRlZFVuaXQsIGVycm9yOiB1cGRhdGVFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1bml0cycpXG4gICAgICAudXBkYXRlKHsgcXJfY29kZV91cmw6IHFyQ29kZVVybCB9KVxuICAgICAgLmVxKCdpZCcsIHVuaXRJZClcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLnNpbmdsZSgpO1xuICAgIFxuICAgIGlmICh1cGRhdGVFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgdW5pdDonLCB1cGRhdGVFcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB1cGRhdGUgdW5pdDogJHt1cGRhdGVFcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdXBkYXRlZFVuaXQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgYXNzaWduaW5nIFFSIGNvZGUgdG8gdW5pdDonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIlFSQ29kZSIsImNyZWF0ZUNsaWVudCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwic3VwYWJhc2UiLCJnZXRCYXNlT3JkZXJVcmwiLCJORVhUX1BVQkxJQ19BUFBfVVJMIiwid2luZG93IiwibG9jYXRpb24iLCJvcmlnaW4iLCJnZW5lcmF0ZVFSQ29kZURhdGFVcmwiLCJ1bml0SWQiLCJvcmRlclVybCIsImRhdGFVcmwiLCJ0b0RhdGFVUkwiLCJ3aWR0aCIsIm1hcmdpbiIsImNvbG9yIiwiZGFyayIsImxpZ2h0IiwiZXJyb3IiLCJjb25zb2xlIiwiRXJyb3IiLCJnZW5lcmF0ZUFuZFVwbG9hZFFSQ29kZSIsInVuaXROdW1iZXIiLCJidWlsZGluZ0lkIiwibG9nIiwicXJDb2RlRGF0YVVybCIsInN1YnN0cmluZyIsImJsb2IiLCJmZXRjaCIsImZpbGUiLCJGaWxlIiwidHlwZSIsIm5hbWUiLCJzaXplIiwiZGF0YSIsImJ1Y2tldHMiLCJidWNrZXRzRXJyb3IiLCJzdG9yYWdlIiwibGlzdEJ1Y2tldHMiLCJtYXAiLCJiIiwiam9pbiIsImJ1Y2tldEV4aXN0cyIsInNvbWUiLCJidWNrZXQiLCJjcmVhdGVCdWNrZXQiLCJwdWJsaWMiLCJjcmVhdGVFcnJvciIsImJ1Y2tldENoZWNrRXJyb3IiLCJmb2xkZXJQYXRoIiwiZm9sZGVyRXJyb3IiLCJmcm9tIiwidXBsb2FkIiwidXBzZXJ0IiwiY29udGVudFR5cGUiLCJtZXNzYWdlIiwidXJsRGF0YSIsImdldFB1YmxpY1VybCIsInB1YmxpY1VybCIsInJlc3BvbnNlIiwibWV0aG9kIiwic3RhdHVzIiwidmVyaWZ5RXJyb3IiLCJ3YXJuIiwiYXNzaWduUVJDb2RlVG9Vbml0IiwidW5pdCIsInVuaXRFcnJvciIsInNlbGVjdCIsImVxIiwic2luZ2xlIiwicXJDb2RlVXJsIiwiaWQiLCJ1bml0X251bWJlciIsImJ1aWxkaW5nX2lkIiwidXBkYXRlRGF0YSIsInFyX2NvZGVfdXJsIiwidXBkYXRlZFVuaXQiLCJ1cGRhdGVFcnJvciIsInVwZGF0ZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/qrcode.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/services/units.ts":
/*!*******************************!*\
  !*** ./app/services/units.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createUnit: () => (/* binding */ createUnit),\n/* harmony export */   deleteUnit: () => (/* binding */ deleteUnit),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   getUnits: () => (/* binding */ getUnits),\n/* harmony export */   updateUnit: () => (/* binding */ updateUnit)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _qrcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./qrcode */ \"(app-pages-browser)/./app/services/qrcode.ts\");\n\n\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\nasync function getUnits(buildingId) {\n    try {\n        let query = supabase.from('units').select('*').order('unit_number');\n        if (buildingId) {\n            query = query.eq('building_id', buildingId);\n        }\n        const { data, error } = await query;\n        if (error) {\n            console.error('Supabase error:', error);\n            throw new Error(\"Failed to fetch units: \".concat(error.message));\n        }\n        if (!data) {\n            throw new Error('No data returned from Supabase');\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in getUnits:', error);\n        throw error;\n    }\n}\nasync function getUnit(id) {\n    try {\n        const { data, error } = await supabase.from('units').select('*').eq('id', id).single();\n        if (error) {\n            console.error('Supabase error:', error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in getUnit:', error);\n        throw error;\n    }\n}\nasync function createUnit(unit) {\n    try {\n        console.log('[Unit Debug] Creating new unit:', unit);\n        // First create the unit without QR code\n        const { data, error } = await supabase.from('units').insert([\n            unit\n        ]).select().single();\n        if (error) {\n            console.error('[Unit Debug] Supabase error creating unit:', error);\n            throw error;\n        }\n        console.log('[Unit Debug] Unit created successfully:', data);\n        // Now generate and assign QR code\n        try {\n            console.log('[Unit Debug] Starting QR code generation for unit:', data.id);\n            const qrCodeUrl = await (0,_qrcode__WEBPACK_IMPORTED_MODULE_0__.generateAndUploadQRCode)(data.id, data.unit_number, data.building_id);\n            console.log('[Unit Debug] QR code generated, URL:', qrCodeUrl);\n            // Update the unit with the QR code URL\n            console.log('[Unit Debug] Updating unit with QR code URL');\n            const { data: updatedData, error: updateError } = await supabase.from('units').update({\n                qr_code_url: qrCodeUrl\n            }).eq('id', data.id).select().single();\n            if (updateError) {\n                console.error('[Unit Debug] Error updating unit with QR code:', updateError);\n                // Still return the unit even if QR code assignment fails\n                return data;\n            }\n            console.log('[Unit Debug] Unit updated with QR code URL successfully:', updatedData);\n            return updatedData;\n        } catch (qrError) {\n            console.error('[Unit Debug] Error generating QR code:', qrError);\n            // Return the unit without QR code if generation fails\n            return data;\n        }\n    } catch (error) {\n        console.error('[Unit Debug] Error in createUnit:', error);\n        throw error;\n    }\n}\nasync function updateUnit(unit) {\n    try {\n        const { data, error } = await supabase.from('units').update(unit).eq('id', unit.id).select().single();\n        if (error) {\n            console.error('Supabase error:', error);\n            throw error;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in updateUnit:', error);\n        throw error;\n    }\n}\nasync function deleteUnit(id) {\n    try {\n        const { error } = await supabase.from('units').delete().eq('id', id);\n        if (error) {\n            console.error('Supabase error:', error);\n            throw error;\n        }\n    } catch (error) {\n        console.error('Error in deleteUnit:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/units.ts\n"));

/***/ })

});