"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/units/page",{

/***/ "(app-pages-browser)/./app/services/qrcode.ts":
/*!********************************!*\
  !*** ./app/services/qrcode.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignQRCodeToUnit: () => (/* binding */ assignQRCodeToUnit),\n/* harmony export */   generateAndUploadQRCode: () => (/* binding */ generateAndUploadQRCode),\n/* harmony export */   generateQRCodeDataUrl: () => (/* binding */ generateQRCodeDataUrl)\n/* harmony export */ });\n/* harmony import */ var qrcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! qrcode */ \"(app-pages-browser)/./node_modules/qrcode/lib/browser.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\n// Base URL for the guest ordering page\nconst getBaseOrderUrl = ()=>{\n    try {\n        // First prioritize environment variable\n        if (true) {\n            // Remove any trailing slash to ensure consistent URL formatting\n            const baseUrl = \"https://myqrcode-hub.vercel.app\".endsWith('/') ? \"https://myqrcode-hub.vercel.app\".slice(0, -1) : \"https://myqrcode-hub.vercel.app\";\n            console.log(\"[URL Debug] Using NEXT_PUBLIC_APP_URL: \".concat(baseUrl, \"/order\"));\n            return \"\".concat(baseUrl, \"/order\");\n        }\n        // Fall back to client-side origin detection only if env var isn't available\n        if (true) {\n            const origin = window.location.origin;\n            console.log(\"[URL Debug] Using window.location.origin: \".concat(origin, \"/order\"));\n            return \"\".concat(origin, \"/order\");\n        }\n        // Last resort fallback\n        console.log('[URL Debug] Using hardcoded fallback URL');\n        return 'http://localhost:3000/order';\n    } catch (error) {\n        // In case of any errors, return the fallback URL\n        console.error('[URL Debug] Error in getBaseOrderUrl:', error);\n        return 'http://localhost:3000/order';\n    }\n};\n// Generate a QR code data URL \nasync function generateQRCodeDataUrl(unitId) {\n    try {\n        const orderUrl = \"\".concat(getBaseOrderUrl(), \"?unit=\").concat(unitId);\n        console.log(\"[QR Debug] Generated order URL for data URL: \".concat(orderUrl));\n        // Generate QR code data URL\n        const dataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_0__.toDataURL(orderUrl, {\n            width: 300,\n            margin: 2,\n            color: {\n                dark: '#000000',\n                light: '#FFFFFF'\n            }\n        });\n        return dataUrl;\n    } catch (error) {\n        console.error('Error generating QR code:', error);\n        throw new Error('Failed to generate QR code');\n    }\n}\n// Generate a QR code and upload to Supabase storage\nasync function generateAndUploadQRCode(unitId, unitNumber, buildingId) {\n    try {\n        console.log(\"[QR Debug] Starting QR code generation for unit: \".concat(unitId, \", building: \").concat(buildingId));\n        const orderUrl = \"\".concat(getBaseOrderUrl(), \"?unit=\").concat(unitId);\n        console.log(\"[QR Debug] Generated order URL: \".concat(orderUrl));\n        // Generate QR code as data URL instead of buffer\n        const qrCodeDataUrl = await qrcode__WEBPACK_IMPORTED_MODULE_0__.toDataURL(orderUrl, {\n            width: 300,\n            margin: 2,\n            color: {\n                dark: '#000000',\n                light: '#FFFFFF'\n            }\n        });\n        console.log(\"[QR Debug] QR code data URL generated successfully (truncated): \".concat(qrCodeDataUrl.substring(0, 50), \"...\"));\n        // Convert data URL to File object for upload\n        const blob = await (await fetch(qrCodeDataUrl)).blob();\n        const file = new File([\n            blob\n        ], \"unit-\".concat(unitId, \".png\"), {\n            type: 'image/png'\n        });\n        console.log(\"[QR Debug] Created File object for upload: \".concat(file.name, \", size: \").concat(file.size, \" bytes\"));\n        // Check if bucket exists\n        try {\n            const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();\n            if (bucketsError) {\n                console.error('[QR Debug] Error listing buckets:', bucketsError);\n            } else {\n                console.log('[QR Debug] Available buckets:', buckets.map((b)=>b.name).join(', '));\n                const bucketExists = buckets.some((bucket)=>bucket.name === 'qrcodes');\n                console.log(\"[QR Debug] Bucket 'qrcodes' exists: \".concat(bucketExists));\n                if (!bucketExists) {\n                    console.error('[QR Debug] The qrcodes bucket does not exist in your Supabase storage!');\n                    // Try to create the bucket\n                    try {\n                        const { data, error } = await supabase.storage.createBucket('qrcodes', {\n                            public: true\n                        });\n                        console.log('[QR Debug] Attempted to create qrcodes bucket:', data, error);\n                    } catch (createError) {\n                        console.error('[QR Debug] Failed to create bucket:', createError);\n                    }\n                }\n            }\n        } catch (bucketCheckError) {\n            console.error('[QR Debug] Error checking buckets:', bucketCheckError);\n        }\n        // Upload the QR code to Supabase Storage\n        console.log(\"[QR Debug] Attempting to upload to path: units/\".concat(buildingId, \"/\").concat(unitId, \".png\"));\n        // Make sure the path exists\n        try {\n            // Create folders structure if needed\n            const folderPath = \"units/\".concat(buildingId);\n            console.log(\"[QR Debug] Creating folder path: \".concat(folderPath));\n        } catch (folderError) {\n            console.error('[QR Debug] Error with folder:', folderError);\n        }\n        const { data, error } = await supabase.storage.from('qrcodes').upload(\"units/\".concat(buildingId, \"/\").concat(unitId, \".png\"), file, {\n            upsert: true,\n            contentType: 'image/png'\n        });\n        if (error) {\n            console.error('[QR Debug] Error uploading QR code:', error);\n            throw new Error(\"Failed to upload QR code: \".concat(error.message));\n        }\n        console.log('[QR Debug] Upload successful:', data);\n        // Get the public URL\n        const { data: urlData } = supabase.storage.from('qrcodes').getPublicUrl(\"units/\".concat(buildingId, \"/\").concat(unitId, \".png\"));\n        console.log('[QR Debug] Generated public URL:', urlData.publicUrl);\n        // Verify the URL by checking if it returns a valid response\n        try {\n            const response = await fetch(urlData.publicUrl, {\n                method: 'HEAD'\n            });\n            console.log(\"[QR Debug] URL verification status: \".concat(response.status));\n        } catch (verifyError) {\n            console.warn('[QR Debug] Could not verify URL:', verifyError);\n        }\n        return urlData.publicUrl;\n    } catch (error) {\n        console.error('[QR Debug] Error generating or uploading QR code:', error);\n        throw new Error('Failed to generate or upload QR code');\n    }\n}\n// Assign a QR code to a unit\nasync function assignQRCodeToUnit(unitId) {\n    try {\n        // Get unit details\n        const { data: unit, error: unitError } = await supabase.from('units').select('*').eq('id', unitId).single();\n        if (unitError) {\n            console.error('Error getting unit:', unitError);\n            throw new Error(\"Failed to get unit: \".concat(unitError.message));\n        }\n        // Generate and upload QR code\n        const qrCodeUrl = await generateAndUploadQRCode(unit.id, unit.unit_number, unit.building_id);\n        // Update unit with QR code URL\n        const updateData = {\n            id: unitId,\n            qr_code_url: qrCodeUrl\n        };\n        const { data: updatedUnit, error: updateError } = await supabase.from('units').update({\n            qr_code_url: qrCodeUrl\n        }).eq('id', unitId).select().single();\n        if (updateError) {\n            console.error('Error updating unit:', updateError);\n            throw new Error(\"Failed to update unit: \".concat(updateError.message));\n        }\n        return updatedUnit;\n    } catch (error) {\n        console.error('Error assigning QR code to unit:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/qrcode.ts\n"));

/***/ })

});