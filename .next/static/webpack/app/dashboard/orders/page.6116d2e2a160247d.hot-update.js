"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/orders/page",{

/***/ "(app-pages-browser)/./app/services/order.ts":
/*!*******************************!*\
  !*** ./app/services/order.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOrder: () => (/* binding */ createOrder),\n/* harmony export */   deleteOrder: () => (/* binding */ deleteOrder),\n/* harmony export */   getOrder: () => (/* binding */ getOrder),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   updateOrderStatus: () => (/* binding */ updateOrderStatus)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://pslapwodbwhedywmlfmk.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBzbGFwd29kYndoZWR5d21sZm1rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1NTQ4NzgsImV4cCI6MjA1NjEzMDg3OH0.YXR7RN1ELBO8ywDv_tXpioTFJrpNXr9UtDLhxzgcHmU\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\nasync function getOrders(filters) {\n    try {\n        let query = supabase.from('orders').select(\"\\n        *,\\n        order_items:order_items(*)\\n      \").order('created_at', {\n            ascending: false\n        });\n        if (filters) {\n            if (filters.unit_id) {\n                query = query.eq('unit_id', filters.unit_id);\n            }\n            if (filters.building_id) {\n                query = query.eq('building_id', filters.building_id);\n            }\n            if (filters.status) {\n                query = query.eq('status', filters.status);\n            }\n        }\n        const { data, error } = await query;\n        if (error) {\n            console.error('Supabase error:', error);\n            throw new Error(\"Failed to fetch orders: \".concat(error.message));\n        }\n        if (!data) {\n            return [];\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in getOrders:', error);\n        throw error;\n    }\n}\nasync function getOrder(id) {\n    try {\n        const { data, error } = await supabase.from('orders').select(\"\\n        *,\\n        order_items:order_items(*)\\n      \").eq('id', id).single();\n        if (error) {\n            if (error.code === 'PGRST116') {\n                // PGRST116 is the error code for \"No rows found\"\n                return null;\n            }\n            console.error('Supabase error:', error);\n            throw new Error(\"Failed to fetch order: \".concat(error.message));\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in getOrder:', error);\n        throw error;\n    }\n}\nasync function createOrder(orderInput) {\n    try {\n        // Start a Supabase transaction (not a real transaction, but a sequence of operations)\n        // 1. Calculate total amount\n        const totalAmount = orderInput.items.reduce((sum, item)=>{\n            return sum + item.price * item.quantity;\n        }, 0);\n        // 2. Create the order\n        const { data: order, error: orderError } = await supabase.from('orders').insert({\n            unit_id: orderInput.unit_id,\n            unit_number: orderInput.unit_number,\n            building_id: orderInput.building_id,\n            building_name: orderInput.building_name,\n            total_amount: totalAmount,\n            notes: orderInput.notes,\n            status: 'pending'\n        }).select('*').single();\n        if (orderError) {\n            console.error('Error creating order:', orderError);\n            throw new Error(\"Failed to create order: \".concat(orderError.message));\n        }\n        // 3. Create order items\n        const orderItems = orderInput.items.map((item)=>({\n                order_id: order.id,\n                item_type: item.item_type,\n                item_id: item.item_id,\n                name: item.name,\n                quantity: item.quantity,\n                price: item.price,\n                notes: item.notes\n            }));\n        const { data: items, error: itemsError } = await supabase.from('order_items').insert(orderItems).select('*');\n        if (itemsError) {\n            console.error('Error creating order items:', itemsError);\n            // Attempt to clean up the order if items creation fails\n            await supabase.from('orders').delete().eq('id', order.id);\n            throw new Error(\"Failed to create order items: \".concat(itemsError.message));\n        }\n        // 4. Return the full order with items\n        return {\n            ...order,\n            order_items: items\n        };\n    } catch (error) {\n        console.error('Error in createOrder:', error);\n        throw error;\n    }\n}\nasync function updateOrderStatus(updateInput) {\n    try {\n        const { id, status } = updateInput;\n        const { data, error } = await supabase.from('orders').update({\n            status\n        }).eq('id', id).select(\"\\n        *,\\n        order_items:order_items(*)\\n      \").single();\n        if (error) {\n            console.error('Error updating order status:', error);\n            throw new Error(\"Failed to update order status: \".concat(error.message));\n        }\n        return data;\n    } catch (error) {\n        console.error('Error in updateOrderStatus:', error);\n        throw error;\n    }\n}\nasync function deleteOrder(id) {\n    try {\n        // No need to delete order items explicitly due to CASCADE constraint\n        const { error } = await supabase.from('orders').delete().eq('id', id);\n        if (error) {\n            console.error('Error deleting order:', error);\n            throw new Error(\"Failed to delete order: \".concat(error.message));\n        }\n    } catch (error) {\n        console.error('Error in deleteOrder:', error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/order.ts\n"));

/***/ })

});